<?php

namespace DataBundle\Repository;

/**
 * BlogPostRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogPostRepository extends \Doctrine\ORM\EntityRepository
{
    protected function getFindByTagOrderdQueryBuilder($tag, $order)
    {
        $qb = $this
            ->createQueryBuilder('p')
            ->leftJoin('p.tags', 't')
            ->where('t.id = :tag_id')
            ->setParameter('tag_id', $tag->getId())
            ->orderBy('p.publishDate', $order)
        ;

        return $qb;
    }

    public function findByTagOrdered($tag, $order = 'asc', $limit = 0)
    {
        $qb = $this->getFindByTagOrderdQueryBuilder($tag, $order);

        if ($limit > 0) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    public function findByTagOrderedPaginated($tag, $order = 'asc', $paginator, $pageNumber)
    {
        $qb = $this->getFindByTagOrderdQueryBuilder($tag, $order);

        $pagination = $paginator->paginate(
            $qb->getQuery(), /* query NOT result */
            $pageNumber/*page number*/,
            10
        );

        return $pagination;
    }

    protected function getFindByBlogOrderdQueryBuilder($blog, $order, $tagSlug = null)
    {
        if(!$tagSlug) {
            $qb = $this
                ->createQueryBuilder('p')
                ->leftJoin('p.blog', 'b')
                ->where('b.id = :blog_id')
                ->setParameter('blog_id', $blog->getId())
                ->orderBy('p.publishDate', $order)
            ;
        } else {
            $qb = $this
                ->createQueryBuilder('p')
                ->leftJoin('p.blog', 'b')
                ->leftJoin('p.tags', 't')
                ->where('b.id = :blog_id')
                ->andWhere('t.slug = :tag_slug')
                ->setParameter('blog_id', $blog->getId())
                ->setParameter('tag_slug', $tagSlug)
                ->orderBy('p.publishDate', $order)
            ;
        }

        return $qb;
    }

    public function findByBlogOrderedPaginated($blog, $order = 'asc', $paginator, $pageNumber)
    {
        $qb = $this->getFindByBlogOrderdQueryBuilder($blog, $order);

        $pagination = $paginator->paginate(
            $qb->getQuery(), /* query NOT result */
            $pageNumber/*page number*/,
            10
        );

        return $pagination;
    }

    public function findByBlogAndTagSlugOrderedPaginated($blog, $tagSlug, $order = 'asc', $paginator, $pageNumber)
    {
        $qb = $this->getFindByBlogOrderdQueryBuilder($blog, $order, $tagSlug);

        $pagination = $paginator->paginate(
            $qb->getQuery(), /* query NOT result */
            $pageNumber/*page number*/,
            10
        );

        return $pagination;
    }

    public function findWithKeyword($keyword)
    {
        $qb = $this
            ->createQueryBuilder('p')
            ->where('p.content like :word')
            ->setParameter('word', '%'.$keyword.'%')
            ->orderBy('p.publishDate', 'desc')
        ;

        $qb->setMaxResults(10);

        return $qb->getQuery()->getresult();
    }
}
